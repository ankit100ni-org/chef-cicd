name: CI/CD Pipeline

on:
  pull_request:
    types: [opened, reopened, edited, synchronize]
    branches:
      - dev

jobs:
  build:
    runs-on: ubuntu-20.04
    env: 
      pat_token: ${{ secrets.GH_TOKEN }}
      parameter1: '42574587345'
      parameter2: 'TestStringWithoutSpace'
      POLICY_DATA: ${{ vars.POLICY_CONTENTS }}
    steps:
    - name: Input Validation
      run : |
        echo "Input Validation"

    - name: Checkout code
      uses: actions/checkout@v4

    # - name: Installing Workstation
    #   run: |
    #     wget https://packages.chef.io/files/stable/chef-workstation/23.12.1055/ubuntu/22.04/chef-workstation_23.12.1055-1_amd64.deb; sudo dpkg -i chef-workstation_23.12.1055-1_amd64.deb
    #     sudo chef env --chef-license accept-silent

    # - name: Fetch Dev branch
    #   run: git fetch origin dev:dev

    # - name: Metadata Check
    #   run: |
    #     git branch
    #     sudo chmod 777 .github/workflows/metadatacheck.sh
    #     sudo bash .github/workflows/metadatacheck.sh

    # - name: Linting Check
    #   run: cookstyle

    # - name: Kitchen
    #   run: | 
    #     kitchen verify
    #     kitchen destroy

    # - name: Policy Management
    #   run: | 
    #     sudo chmod 777 .github/workflows/policy_manage.sh
    #     sudo ./.github/workflows/policy_manage.sh "$ORG_DATA" "$CHEFADMIN" "$TESTUSER"
    #   env:
    #     ORG_DATA: ${{ vars.ORG_DETAILS }}
    #     CHEFADMIN: ${{ secrets.CHEFADMIN }}
    #     TESTUSER: ${{ secrets.TESTUSER }}

    - name: Calling Pipeline
      run: |
        parameter1=$(cat Policyfile.rb | grep "^name" | awk '{print $2}' | tr -d \' | tr -d '[:blank:]')
        parameter2=${{ github.base_ref }}
        TOKEN="${{ secrets.GH_TOKEN }}"
        OWNER="ankit100ni-org"
        keys=$(echo "$POLICY_DATA" | jq -r 'keys[]')
        for key in $keys; do
          if echo "$POLICY_DATA" | jq -r --arg key "$key" '.[$key] | index("pipe")' | grep -q "null"; then
            echo "INFO: This repo in not the part of Base Policy."
          else
            echo "INFO: This repo is part of the Base Policy."
            REPO="$key"
            curl -X POST \
              -H "Accept: application/vnd.github.v3+json" \
              -H "Authorization: token $TOKEN" \
              -d "{\"event_type\": \"$Workflow_Name\", \"client_payload\": {\"parameter1\": \"$parameter1\", \"parameter2\": \"$parameter2\"}}" \
              "https://api.github.com/repos/$OWNER/$REPO/dispatches"
          fi
        done
        # # Parse JSON data and iterate over each object
        # for policy in $(echo "$POLICY_DATA" | jq -c '.[]'); do
        #   # Check if "Policy" is present in the Base Policy
        #   if [[ $policy =~ $parameter1 ]]; then
        #     echo "INFO: This repo is part of the Base Policy."
        #     REPO="$base"
        #     curl -X POST \
        #       -H "Accept: application/vnd.github.v3+json" \
        #       -H "Authorization: token $TOKEN" \
        #       -d "{\"event_type\": \"$Workflow_Name\", \"client_payload\": {\"parameter1\": \"$parameter1\", \"parameter2\": \"$parameter2\"}}" \
        #       "https://api.github.com/repos/$OWNER/$REPO/dispatches"
        #   else
        #     echo "INFO: This repo in not the part of Base Policy."
        #   fi
        # done

        # declare -a arr=('base-policy' 'base_policy2')
        # for base in "${arr[@]}"
        # do
        #   TOKEN="${{ secrets.GH_TOKEN }}"
        #   OWNER="ankit100ni-org"
        #   REPO="$base"
        #   Workflow_Name="$base"
        #   parameter1=$(cat Policyfile.rb | grep "^name" | awk '{print $2}' | tr -d \' | tr -d '[:blank:]')
        #   parameter2=${{ github.base_ref }}
          
        #   curl -X POST \
        #     -H "Accept: application/vnd.github.v3+json" \
        #     -H "Authorization: token $TOKEN" \
        #     -d "{\"event_type\": \"$Workflow_Name\", \"client_payload\": {\"parameter1\": \"$parameter1\", \"parameter2\": \"$parameter2\"}}" \
        #     "https://api.github.com/repos/$OWNER/$REPO/dispatches"
        # done

    # - name: Merge
    #   run: |
    #     echo "${{ secrets.GH_TOKEN }}" > /tmp/token.txt
    #     cat /tmp/token.txt
    #     gh auth login --with-token < /tmp/token.txt
    #     gh pr list
    #     gh pr merge -m ${{ github.event.number }}
